{"ast":null,"code":"import _regeneratorRuntime from \"/Users/Remus/Workspace/Zone/movie-listings/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/Remus/Workspace/Zone/movie-listings/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/Remus/Workspace/Zone/movie-listings/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/Remus/Workspace/Zone/movie-listings/src/components/App.js\";\nimport React, { useState, useEffect, lazy, Suspense } from 'react';\nimport axios from 'axios';\nimport 'react-rangeslider/lib/index.css';\nimport Header from './Header';\nimport FilterBar from './FilterBar';\nimport '../css/App.css';\nvar API_KEY = process.env.REACT_APP_API_KEY; // Lazyload the movie compnenents\n\nvar Movie = lazy(function () {\n  return import('./Movie');\n}); // React Hooks set up State inside a component function. This is an alpha release and more information can be found at https://reactjs.org/docs/hooks-intro.html\n\nfunction App() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      initialized = _useState2[0],\n      setInitialized = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      initialRating = _useState4[0],\n      setInitialRating = _useState4[1];\n\n  var _useState5 = useState({\n    results: []\n  }),\n      _useState6 = _slicedToArray(_useState5, 2),\n      dataMovies = _useState6[0],\n      setMovieList = _useState6[1];\n\n  var _useState7 = useState({\n    genres: []\n  }),\n      _useState8 = _slicedToArray(_useState7, 2),\n      dataGenres = _useState8[0],\n      setGenreList = _useState8[1];\n\n  var _useState9 = useState(3),\n      _useState10 = _slicedToArray(_useState9, 2),\n      rating = _useState10[0],\n      setRating = _useState10[1]; // API calls to returns JSON that's added to the state using React Hooks\n\n\n  var fetchData =\n  /*#__PURE__*/\n  function () {\n    var _ref = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var movies, genres;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return axios(\"https://api.themoviedb.org/3/movie/popular?api_key=\".concat(API_KEY, \"&language=en-US\"));\n\n            case 2:\n              movies = _context.sent;\n              _context.next = 5;\n              return axios(\"https://api.themoviedb.org/3/genre/movie/list?api_key=\".concat(API_KEY, \"&language=en-US\"));\n\n            case 5:\n              genres = _context.sent;\n              setMovieList(movies.data);\n              setGenreList(genres);\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    return function fetchData() {\n      return _ref.apply(this, arguments);\n    };\n  }(); // React Hook equivalent of using componentDidMount\n\n\n  useEffect(function () {\n    // Call the API only once\n    if (!initialized) {\n      fetchData();\n      setInitialized(true);\n    }\n  }); // Passes the genre ID from the FilterBar component. Finds the genre \n  // node and see if the filter has already been checked. \n  // Sets the genre node as 'itemChecked' as true or false.\n  // Updates the 'genre' state then creates an array of checked filters.\n  // Filters overs the movie node and updates the state using the new \n  // inserted value 'visible'.\n\n  var handleOnGenreChange = function handleOnGenreChange(element, itemChecked) {\n    // Reset Rating slider incase it has values. From UX perspective it's\n    // much nicer to see all movie with genre and then filter by rating\n    setInitialRating(false); // Update genre state to show what has been checked by matching genre\n\n    dataGenres.data.genres.filter(function (genre) {\n      return genre.id === element ? genre.itemChecked = !genre.itemChecked : '';\n    });\n    setGenreList(dataGenres); // Create array of selected genres\n\n    var checkedFilters = dataGenres.data.genres.filter(function (genre) {\n      return genre.itemChecked === true;\n    }).map(function (selected) {\n      return selected.id;\n    }); // Update movie state by matching checked genres and movie genre_ids\n\n    dataMovies.results.filter(function (movie) {\n      return compareArrays(movie.genre_ids, checkedFilters) ? movie.visible = true : movie.visible = false;\n    });\n  }; // Passes the value of the rating from the RatingSlider \n\n\n  var handleOnRatingChange = function handleOnRatingChange(value) {\n    // Switch rating functionality by setting to true\n    setInitialRating(true);\n    setRating(value); // Create array of selected genre\n\n    var checkedFilters = dataGenres.data.genres.filter(function (genre) {\n      return genre.itemChecked === true;\n    }).map(function (selected) {\n      return selected.id;\n    }); // Update movie state by matching checked genres and movie genre_ids\n    // as well as matching the movie vote_average\n\n    dataMovies.results.filter(function (movie) {\n      return movie.vote_average >= value && compareArrays(movie.genre_ids, checkedFilters) ? movie.visible = true : movie.visible = false;\n    });\n    setMovieList(dataMovies);\n  }; // Compare two arrays Genre ID and array of selected genre ids\n\n\n  function compareArrays(genre_ids, checkedFilters) {\n    return checkedFilters.every(function (value) {\n      return genre_ids.includes(value);\n    });\n  }\n\n  ;\n  return React.createElement(\"div\", {\n    className: \"app\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, React.createElement(Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }), dataGenres.data ? React.createElement(FilterBar, {\n    handleOnGenreChange: handleOnGenreChange,\n    genres: dataGenres.data.genres,\n    handleOnRatingChange: handleOnRatingChange,\n    rating: rating,\n    initialRating: initialRating,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }) : 'Loading information ...', React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"row justify-content-md-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, React.createElement(Suspense, {\n    fallback: React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, \"Loading movie info...\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, dataMovies.results.map(function (movie, index) {\n    return React.createElement(Movie, {\n      key: movie.id,\n      index: index,\n      movie: movie,\n      genres: dataGenres.data,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    });\n  }))), React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, \"Paging 1 | 2| 3 [todo]\")), React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"row justify-content-md-center my-5 camogreen pull-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, \"This product uses the TMDb API but is not endorsed or certified by TMDb.\")));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/Remus/Workspace/Zone/movie-listings/src/components/App.js"],"names":["React","useState","useEffect","lazy","Suspense","axios","Header","FilterBar","API_KEY","process","env","REACT_APP_API_KEY","Movie","App","initialized","setInitialized","initialRating","setInitialRating","results","dataMovies","setMovieList","genres","dataGenres","setGenreList","rating","setRating","fetchData","movies","data","handleOnGenreChange","element","itemChecked","filter","genre","id","checkedFilters","map","selected","movie","compareArrays","genre_ids","visible","handleOnRatingChange","value","vote_average","every","includes","index"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,IAArC,EAA2CC,QAA3C,QAA2D,OAA3D;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,iCAAP;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAO,gBAAP;AAEA,IAAMC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,iBAA5B,C,CAEA;;AACA,IAAIC,KAAK,GAAGT,IAAI,CAAC;AAAA,SAAM,OAAO,SAAP,CAAN;AAAA,CAAD,CAAhB,C,CAEA;;AACA,SAASU,GAAT,GAAe;AAAA,kBACyBZ,QAAQ,CAAC,KAAD,CADjC;AAAA;AAAA,MACNa,WADM;AAAA,MACOC,cADP;;AAAA,mBAE6Bd,QAAQ,CAAC,KAAD,CAFrC;AAAA;AAAA,MAENe,aAFM;AAAA,MAESC,gBAFT;;AAAA,mBAGsBhB,QAAQ,CAAC;AAAEiB,IAAAA,OAAO,EAAE;AAAX,GAAD,CAH9B;AAAA;AAAA,MAGNC,UAHM;AAAA,MAGMC,YAHN;;AAAA,mBAIsBnB,QAAQ,CAAC;AAAEoB,IAAAA,MAAM,EAAE;AAAV,GAAD,CAJ9B;AAAA;AAAA,MAINC,UAJM;AAAA,MAIMC,YAJN;;AAAA,mBAKetB,QAAQ,CAAC,CAAD,CALvB;AAAA;AAAA,MAKNuB,MALM;AAAA,MAKEC,SALF,mBAOb;;;AACA,MAAMC,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACKrB,KAAK,8DAC8BG,OAD9B,qBADV;;AAAA;AACVmB,cAAAA,MADU;AAAA;AAAA,qBAIKtB,KAAK,iEACiCG,OADjC,qBAJV;;AAAA;AAIVa,cAAAA,MAJU;AAQhBD,cAAAA,YAAY,CAACO,MAAM,CAACC,IAAR,CAAZ;AACAL,cAAAA,YAAY,CAACF,MAAD,CAAZ;;AATgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAATK,SAAS;AAAA;AAAA;AAAA,KAAf,CARa,CAoBf;;;AACAxB,EAAAA,SAAS,CAAC,YAAM;AACd;AACA,QAAI,CAACY,WAAL,EAAkB;AAChBY,MAAAA,SAAS;AACTX,MAAAA,cAAc,CAAC,IAAD,CAAd;AACD;AACF,GANQ,CAAT,CArBe,CA6Bb;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMc,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,OAAD,EAAUC,WAAV,EAA0B;AACpD;AACA;AACAd,IAAAA,gBAAgB,CAAC,KAAD,CAAhB,CAHoD,CAIpD;;AACAK,IAAAA,UAAU,CAACM,IAAX,CAAgBP,MAAhB,CAAuBW,MAAvB,CAA8B,UAAAC,KAAK;AAAA,aAAIA,KAAK,CAACC,EAAN,KAAaJ,OAAb,GAAuBG,KAAK,CAACF,WAAN,GAAoB,CAACE,KAAK,CAACF,WAAlD,GAA+D,EAAnE;AAAA,KAAnC;AACAR,IAAAA,YAAY,CAACD,UAAD,CAAZ,CANoD,CAOpD;;AACA,QAAIa,cAAc,GAAGb,UAAU,CAACM,IAAX,CAAgBP,MAAhB,CAAuBW,MAAvB,CAA8B,UAAAC,KAAK;AAAA,aAAIA,KAAK,CAACF,WAAN,KAAsB,IAA1B;AAAA,KAAnC,EAAmEK,GAAnE,CAAuE,UAACC,QAAD;AAAA,aAAcA,QAAQ,CAACH,EAAvB;AAAA,KAAvE,CAArB,CARoD,CASpD;;AACAf,IAAAA,UAAU,CAACD,OAAX,CAAmBc,MAAnB,CAA0B,UAAAM,KAAK;AAAA,aAAIC,aAAa,CAACD,KAAK,CAACE,SAAP,EAAkBL,cAAlB,CAAb,GAAiDG,KAAK,CAACG,OAAN,GAAgB,IAAjE,GAAuEH,KAAK,CAACG,OAAN,GAAgB,KAA3F;AAAA,KAA/B;AACD,GAXD,CAnCa,CAgDb;;;AACA,MAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,KAAD,EAAW;AACtC;AACA1B,IAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACAQ,IAAAA,SAAS,CAACkB,KAAD,CAAT,CAHsC,CAItC;;AACA,QAAIR,cAAc,GAAGb,UAAU,CAACM,IAAX,CAAgBP,MAAhB,CAAuBW,MAAvB,CAA8B,UAAAC,KAAK;AAAA,aAAIA,KAAK,CAACF,WAAN,KAAsB,IAA1B;AAAA,KAAnC,EAAmEK,GAAnE,CAAuE,UAACC,QAAD;AAAA,aAAcA,QAAQ,CAACH,EAAvB;AAAA,KAAvE,CAArB,CALsC,CAMtC;AACA;;AACAf,IAAAA,UAAU,CAACD,OAAX,CAAmBc,MAAnB,CAA0B,UAAAM,KAAK;AAAA,aAAIA,KAAK,CAACM,YAAN,IAAsBD,KAAtB,IAA+BJ,aAAa,CAACD,KAAK,CAACE,SAAP,EAAkBL,cAAlB,CAA5C,GAAgFG,KAAK,CAACG,OAAN,GAAgB,IAAhG,GAAsGH,KAAK,CAACG,OAAN,GAAgB,KAA1H;AAAA,KAA/B;AACArB,IAAAA,YAAY,CAACD,UAAD,CAAZ;AACD,GAVD,CAjDa,CA4Db;;;AACA,WAASoB,aAAT,CAAuBC,SAAvB,EAAkCL,cAAlC,EAAiD;AAC/C,WAAOA,cAAc,CAACU,KAAf,CAAqB,UAAAF,KAAK;AAAA,aAAIH,SAAS,CAACM,QAAV,CAAmBH,KAAnB,CAAJ;AAAA,KAA1B,CAAP;AACD;;AAAA;AAED,SACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAGMrB,UAAU,CAACM,IAAX,GACC,oBAAC,SAAD;AACE,IAAA,mBAAmB,EAAEC,mBADvB;AAEE,IAAA,MAAM,EAAEP,UAAU,CAACM,IAAX,CAAgBP,MAF1B;AAGE,IAAA,oBAAoB,EAAEqB,oBAHxB;AAIE,IAAA,MAAM,EAAElB,MAJV;AAIkB,IAAA,aAAa,EAAER,aAJjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,GAOG,yBAVT,EAYE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC;AAAK,IAAA,SAAS,EAAC,+BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,oBAAC,QAAD;AAAU,IAAA,QAAQ,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEEG,UAAU,CAACD,OAAX,CAAmBkB,GAAnB,CAAuB,UAACE,KAAD,EAAQS,KAAR;AAAA,WACvB,oBAAC,KAAD;AACE,MAAA,GAAG,EAAET,KAAK,CAACJ,EADb;AAEE,MAAA,KAAK,EAAEa,KAFT;AAGE,MAAA,KAAK,EAAET,KAHT;AAIE,MAAA,MAAM,EAAEhB,UAAU,CAACM,IAJrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADuB;AAAA,GAAvB,CAFF,CADA,CADD,EAcC;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAdD,CAZF,EA+BE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC;AAAK,IAAA,SAAS,EAAC,0DAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gFADD,CA/BF,CADF;AAuCD;;AACD,eAAef,GAAf","sourcesContent":["import React, { useState, useEffect, lazy, Suspense } from 'react';\nimport axios from 'axios';\nimport 'react-rangeslider/lib/index.css';\nimport Header from './Header';\nimport FilterBar from './FilterBar';\nimport '../css/App.css';\n\nconst API_KEY = process.env.REACT_APP_API_KEY\n\n// Lazyload the movie compnenents\nlet Movie = lazy(() => import('./Movie'));\n\n// React Hooks set up State inside a component function. This is an alpha release and more information can be found at https://reactjs.org/docs/hooks-intro.html\nfunction App() {\n  const [initialized, setInitialized] = useState(false);\n  const [initialRating, setInitialRating] = useState(false);\n  const [dataMovies, setMovieList] = useState({ results: [] });\n  const [dataGenres, setGenreList] = useState({ genres: [] });\n  const [rating, setRating] = useState(3);\n\n  // API calls to returns JSON that's added to the state using React Hooks\n  const fetchData = async () => {\n    const movies = await axios(\n      `https://api.themoviedb.org/3/movie/popular?api_key=${API_KEY}&language=en-US`,\n    );\n    const genres = await axios(\n      `https://api.themoviedb.org/3/genre/movie/list?api_key=${API_KEY}&language=en-US`,\n    );\n\n    setMovieList(movies.data);\n    setGenreList(genres);\n  };\n\n// React Hook equivalent of using componentDidMount\nuseEffect(() => {\n  // Call the API only once\n  if (!initialized) {\n    fetchData();\n    setInitialized(true);\n  }\n})\n\n  // Passes the genre ID from the FilterBar component. Finds the genre \n  // node and see if the filter has already been checked. \n  // Sets the genre node as 'itemChecked' as true or false.\n  // Updates the 'genre' state then creates an array of checked filters.\n  // Filters overs the movie node and updates the state using the new \n  // inserted value 'visible'.\n  const handleOnGenreChange = (element, itemChecked) => {\n    // Reset Rating slider incase it has values. From UX perspective it's\n    // much nicer to see all movie with genre and then filter by rating\n    setInitialRating(false);\n    // Update genre state to show what has been checked by matching genre\n    dataGenres.data.genres.filter(genre => genre.id === element ? genre.itemChecked = !genre.itemChecked: '' );    \n    setGenreList(dataGenres);\n    // Create array of selected genres\n    let checkedFilters = dataGenres.data.genres.filter(genre => genre.itemChecked === true).map((selected) => selected.id)\n    // Update movie state by matching checked genres and movie genre_ids\n    dataMovies.results.filter(movie => compareArrays(movie.genre_ids, checkedFilters) ? movie.visible = true: movie.visible = false)\n  }\n\n  // Passes the value of the rating from the RatingSlider \n  const handleOnRatingChange = (value) => {\n    // Switch rating functionality by setting to true\n    setInitialRating(true);\n    setRating(value);\n    // Create array of selected genre\n    let checkedFilters = dataGenres.data.genres.filter(genre => genre.itemChecked === true).map((selected) => selected.id)\n    // Update movie state by matching checked genres and movie genre_ids\n    // as well as matching the movie vote_average\n    dataMovies.results.filter(movie => movie.vote_average >= value && compareArrays(movie.genre_ids, checkedFilters) ? movie.visible = true: movie.visible = false);\n    setMovieList(dataMovies)\n  }\n  // Compare two arrays Genre ID and array of selected genre ids\n  function compareArrays(genre_ids, checkedFilters){ \n    return checkedFilters.every(value => genre_ids.includes(value));\n  };\n  \n  return (\n    <div className=\"app\">\n      <Header />\n        { \n          dataGenres.data ?  \n           <FilterBar \n             handleOnGenreChange={handleOnGenreChange} \n             genres={dataGenres.data.genres} \n             handleOnRatingChange={handleOnRatingChange} \n             rating={rating} initialRating={initialRating} \n           /> \n           : 'Loading information ...'\n        }    \n      <div className=\"container\">\n       <div className=\"row justify-content-md-center\">\n       <Suspense fallback={<div>Loading movie info...</div>} >\n        { \n         dataMovies.results.map((movie, index) =>\n         <Movie \n           key={movie.id}\n           index={index} \n           movie={movie}\n           genres={dataGenres.data}\n         /> )\n        }\n        </Suspense>\n       </div>\n       <div className=\"row\">\n       Paging 1 | 2| 3 [todo]\n       </div>\n       \n      </div>\n      <div className=\"container\">\n       <div className=\"row justify-content-md-center my-5 camogreen pull-center\">\n        This product uses the TMDb API but is not endorsed or certified by TMDb.\n       </div>\n      </div>\n    </div>\n  )\n}\nexport default App;"]},"metadata":{},"sourceType":"module"}
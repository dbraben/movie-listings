{"version":3,"sources":["Header.js","RatingSlider.js","FilterBar.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","RatingSlider","_ref","rating","handleOnRatingChange","initialRating","react_rangeslider_lib_default","min","max","step","value","orientation","onChange","FilterBar","handleOnGenreChange","genres","itemChecked","map","genre","index","key","type","name","id","checked","src_RatingSlider","API_KEY","process","Movie","lazy","__webpack_require__","e","then","bind","App","_useState","useState","_useState2","Object","slicedToArray","initialized","setInitialized","_useState3","_useState4","setInitialRating","_useState5","results","_useState6","dataMovies","setMovieList","_useState7","_useState8","dataGenres","setGenreList","_useState9","_useState10","setRating","fetchData","asyncToGenerator","regenerator_default","mark","_callee","movies","wrap","_context","prev","next","axios","concat","sent","data","stop","this","apply","arguments","compareArrays","genre_ids","checkedFilters","every","includes","useEffect","src_Header","src_FilterBar","element","filter","selected","movie","visible","vote_average","react","fallback","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","URL","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e56ebdfb.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Header(){\n    return (\n       \n        <div className=\"container\">\n          <div className=\"row justify-content-md-center my-3 mx-2\">\n           <h1 className=\"h1 pull-center\">THE MOVIE LISTING</h1>\n          </div>\n        </div>\n    )\n }\n \n export default Header;","import React from 'react';\nimport Slider from 'react-rangeslider';\n\n// Passes in the value of the rating and the slider\n// method 'handleOnRatingChange' used to filtering the \n// selection of movies by the 'average_vote' \n// Movie/now_playing API value.\n\nfunction RatingSlider({ rating, handleOnRatingChange, initialRating }) {\n\n    return (\n     <div className=\"row justify-content-md-center my-3\">\n       { initialRating ?\n        <div className=\"pull-center col-12\">Ratings of <strong><span className=\"rate-color\">{rating}</span>/10</strong> or above</div> : \n       <div className=\"pull-center col-12\">Click to filter by rating</div> }\n        <div className=\"centeriser\">\n        <Slider\n          min={0}\n          max={10}\n          step={0.5}\n          value={rating}\n          orientation=\"horizontal\"\n          onChange={(value) => handleOnRatingChange(value)}\n        />\n        </div>\n     </div>\n    )\n}\n\nexport default RatingSlider;","import React from 'react';\nimport RatingSlider from './RatingSlider'\n\n// The filterbar takes in the values of the movies and genres\n// and combines the deep node values. It also manages the context\n// of the movie filters using the itemChecked value within the \n// checkbox.\nfunction FilterBar({ handleOnGenreChange, genres, handleOnRatingChange, rating, itemChecked, initialRating }){\n    return(\n      <div className=\"row justify-content-md-center\">\n        <div className=\"row greybkd app-heading px-5\">\n         { genres ? genres.map((genre, index) => \n                <div className='genres col-lg-2 col-md-4 col-sm-4 col-xl-2 col-6' key={index}>\n                    <label>\n                        <input type=\"checkbox\" \n                            name={genre.name} \n                            value={genre.id}\n                            id={genre.id}\n                            checked={itemChecked}\n                            onChange={(itemChecked) => handleOnGenreChange(genre.id, itemChecked.value)}\n                        /> \n                       &nbsp; { genre.name }\n                    </label>\n                </div>\n            ): 'Loading ...'\n         }\n        </div>\n        <div className=\"row justify-content-md-center my-3\">\n             <RatingSlider handleOnRatingChange={handleOnRatingChange} rating={rating} initialRating={initialRating} />\n        </div>\n      </div>\n    )\n }\n export default FilterBar;","import React, { useState, useEffect, lazy, Suspense } from 'react';\nimport axios from 'axios';\nimport 'react-rangeslider/lib/index.css';\nimport Header from './Header';\nimport FilterBar from './FilterBar';\nimport './App.css';\n\nconst API_KEY = process.env.REACT_APP_API_KEY;\n\n// Lazyload the movie compnenents\nlet Movie = lazy(() => import('./Movie'));\n\n// React Hooks set up State inside a component function. This is an alpha release and more information can be found at https://reactjs.org/docs/hooks-intro.html\nfunction App() {\n  const [initialized, setInitialized] = useState(false);\n  const [initialRating, setInitialRating] = useState(false);\n  const [dataMovies, setMovieList] = useState({ results: [] });\n  const [dataGenres, setGenreList] = useState({ genres: [] });\n  const [rating, setRating] = useState(3);\n\n  // API calls to returns JSON that's added to the state using React Hooks\n  const fetchData = async () => {\n      const movies = await axios(\n      `https://api.themoviedb.org/3/movie/popular?api_key=${API_KEY}&language=en-US`,\n    );\n    const genres = await axios(\n      `https://api.themoviedb.org/3/genre/movie/list?api_key=${API_KEY}&language=en-US`,\n    );\n\n    setMovieList(movies.data);\n    setGenreList(genres);\n  };\n\n// React Hook equivalent of using componentDidMount\nuseEffect(() => {\n  // Call the API only once\n  if (!initialized) {\n    fetchData();\n    setInitialized(true);\n  }\n})\n\n  // Passes the genre ID from the FilterBar component. Finds the genre \n  // node and see if the filter has already been checked. \n  // Sets the genre node as 'itemChecked' as true or false.\n  // Updates the 'genre' state then creates an array of checked filters.\n  // Filters overs the movie node and updates the state using the new \n  // inserted value 'visible'.\n  const handleOnGenreChange = (element, itemChecked) => {\n    // Reset Rating slider incase it has values. From UX perspective it's\n    // much nicer to see all movie with genre and then filter by rating\n    setInitialRating(false);\n    // Update genre state to show what has been checked by matching genre\n    dataGenres.data.genres.filter(genre => genre.id === element ? genre.itemChecked = !genre.itemChecked: '' );    \n    setGenreList(dataGenres);\n    // Create array of selected genres\n    let checkedFilters = dataGenres.data.genres.filter(genre => genre.itemChecked === true).map((selected) => selected.id)\n    // Update movie state by matching checked genres and movie genre_ids\n    dataMovies.results.filter(movie => compareArrays(movie.genre_ids, checkedFilters) ? movie.visible = true: movie.visible = false)\n  }\n\n  // Passes the value of the rating from the RatingSlider \n  const handleOnRatingChange = (value) => {\n    // Switch rating functionality by setting to true\n    setInitialRating(true);\n    setRating(value);\n    // Create array of selected genre\n    let checkedFilters = dataGenres.data.genres.filter(genre => genre.itemChecked === true).map((selected) => selected.id)\n    // Update movie state by matching checked genres and movie genre_ids\n    // as well as matching the movie vote_average\n    dataMovies.results.filter(movie => movie.vote_average >= value && compareArrays(movie.genre_ids, checkedFilters) ? movie.visible = true: movie.visible = false);\n    setMovieList(dataMovies)\n  }\n  // Compare two arrays Genre ID and array of selected genre ids\n  function compareArrays(genre_ids, checkedFilters){ \n    return checkedFilters.every(value => genre_ids.includes(value));\n  };\n  \n  return (\n    <div className=\"app\">\n      <Header />\n        { \n          dataGenres.data ?  \n           <FilterBar \n             handleOnGenreChange={handleOnGenreChange} \n             genres={dataGenres.data.genres} \n             handleOnRatingChange={handleOnRatingChange} \n             rating={rating} initialRating={initialRating} \n           /> \n           : 'Loading information ...'\n        }    \n      <div className=\"container\">\n       <div className=\"row justify-content-md-center\">\n       <Suspense fallback={<div>Loading movie info...</div>} >\n        { \n         dataMovies.results.map((movie, index) =>\n         <Movie \n           key={movie.id}\n           index={index} \n           movie={movie}\n           genres={dataGenres.data}\n         /> )\n        }\n        </Suspense>\n       </div>\n      </div>\n      <div className=\"container\">\n       <div className=\"row justify-content-md-center my-5 camogreen pull-center\">\n        This product uses the TMDb API but is not endorsed or certified by TMDb.\n       </div>\n      </div>\n    </div>\n  )\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      \n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}